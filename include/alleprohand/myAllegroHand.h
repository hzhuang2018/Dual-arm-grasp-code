// myAllegroHand.cpp : Defines the entry point for the console application.
//

#include "..\include\alleprohand\stdafx.h"
#include "windows.h"
#include <conio.h>
#include <process.h>
#include <tchar.h>
#include "..\include\alleprohand\canAPI.h"
#include "..\include\alleprohand\rDeviceAllegroHandCANDef.h"
#include "..\include\alleprohand\rPanelManipulatorCmdUtil.h"
#include "..\include\alleprohand\BHand.h"
/*
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
// IMPORTANT !!
// SET CORRECT HAND PARAMETER HERE BEFORE RUNNING THIS PROGRAM.
const bool	RIGHT_HAND = true;
const int	HAND_VERSION = 4;
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
// for CAN communication
const double delT = 0.003;
int CAN_Ch = 0;
bool ioThreadRun = false;
uintptr_t ioThread = 0;
int recvNum = 0;
int sendNum = 0;
double statTime = -1.0;
AllegroHand_DeviceMemory_t vars;//encoder ,actual pwm,demand pwm

/////////////////////////////////////////////////////////////////////////////////////////
// for rPanelManipulator
rPanelManipulatorData_t* pSHM = NULL;
double curTime = 0.0;

/////////////////////////////////////////////////////////////////////////////////////////
// for BHand library
BHand* pBHand = NULL;
double q[MAX_DOF];
double q_des[MAX_DOF];
double tau_des[MAX_DOF];
double cur_des[MAX_DOF];

/////////////////////////////////////////////////////////////////////////////////////////
// Hand parameters
const double tau_cov_const_v4 = 1200.0; // 1200.0 for SAH040xxxxx
const short pwm_max_DC8V = 800; // 1200 is max
const short pwm_max_DC24V = 500;
*/
/////////////////////////////////////////////////////////////////////////////////////////
// sample motions
#include "..\include\alleprohand\RockScissorsPaper.h"

/////////////////////////////////////////////////////////////////////////////////////////
// functions declarations
void PrintInstruction();
void MainLoop();
bool OpenCAN();
void CloseCAN();
int GetCANChannelIndex(const TCHAR* cname);
bool CreateBHandAlgorithm();
void DestroyBHandAlgorithm();
void ComputeTorque();

/////////////////////////////////////////////////////////////////////////////////////////
// CAN communication thread
static unsigned int __stdcall ioThreadProc(void* inst);

/////////////////////////////////////////////////////////////////////////////////////////
// Application main-loop. It handles the commands from rPanelManipulator and keyboard events
void MainLoop();

/////////////////////////////////////////////////////////////////////////////////////////
// Compute control torque for each joint using BHand library
void ComputeTorque();


/////////////////////////////////////////////////////////////////////////////////////////
// Open a CAN data channel
bool OpenCAN();


/////////////////////////////////////////////////////////////////////////////////////////
// Close CAN data channel
void CloseCAN();


/////////////////////////////////////////////////////////////////////////////////////////
// Load and create grasping algorithm
bool CreateBHandAlgorithm();


/////////////////////////////////////////////////////////////////////////////////////////
// Destroy grasping algorithm
void DestroyBHandAlgorithm();


/////////////////////////////////////////////////////////////////////////////////////////
// Print program information and keyboard instructions
void PrintInstruction();


/////////////////////////////////////////////////////////////////////////////////////////
// Get channel index for Peak CAN interface
int GetCANChannelIndex(const TCHAR* cname);


//unsigned int __stdcall threadDemo(LPVOID) // void *
//{
//	printf("Œ“±ª÷¥––¿≤£°\n");
//	return 0;
//}


/////////////////////////////////////////////////////////////////////////////////////////
// Program main
//int _tmain(int argc, _TCHAR* argv[])
int test_tmain();